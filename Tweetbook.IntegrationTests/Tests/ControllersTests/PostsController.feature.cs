// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tweetbook.Tests.Integration.Tests.ControllersTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Posts Controller")]
    public partial class PostsControllerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PostsController.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Posts Controller", "\tIn order to execute basic CRUD operations with Posts\r\n\tAs Tweetbook developer\r\n\t" +
                    "I want to have /posts endpoint ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "UserName",
                        "NormalizedUserName",
                        "Email",
                        "NormalizedEmail",
                        "EmailConfirmed",
                        "PasswordHash",
                        "SecurityStamp",
                        "ConcurrencyStamp",
                        "PhoneNumberConfirmed",
                        "TwoFactorEnabled",
                        "LockoutEnabled",
                        "AccessFailedCount"});
            table75.AddRow(new string[] {
                        "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                        "user@mail.com",
                        "USER@MAIL.COM",
                        "user_poster@mail.com",
                        "USER@MAIL.COM",
                        "False",
                        "AQAAAAEAACcQAAAAEE3O6wFKAY2CL9jx4QvTk+XnPRE419lmYlyvs7Fffu5T5pspM2z3/RCo3D6IsnyfD" +
                            "Q==",
                        "DYER7IXAG6MD244BVFN5ETREGHYX6GSP",
                        "fe4b708e-e301-4056-8acc-4144dc8c285e",
                        "False",
                        "False",
                        "True",
                        "0"});
#line 7
 testRunner.Given("\"IdentityUser\" records exist in database", ((string)(null)), table75, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new post")]
        public virtual void CreateNewPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new post", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table76.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 13
 testRunner.When("Login as", ((string)(null)), table76, "When ");
#line hidden
#line 16
 testRunner.When("Execute \"Post\" requst to \"api/v1/posts\"", "{\r\n  \"PostTitle\": \"My First Post\",\r\n  \"PostContent\": \"Ut enim ad minima veniam, q" +
                        "uis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid e" +
                        "x ea commodi consequatur?\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/posts\" is \"Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/posts\" contains property \"id\" as vali" +
                        "d GUID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/posts\" contains object, ignoring prop" +
                        "erties \"id\"", @"{	
  ""id"": ""some guid, value is ignored in this test case"",
  ""postTitle"": ""My First Post"",
  ""postContent"": ""Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?"",
  ""userId"": ""c913181d-c97d-46e3-a3c9-6c4fd63cef9e""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table77.AddRow(new string[] {
                            "My First Post",
                            "Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit lab" +
                                "oriosam, nisi ut aliquid ex ea commodi consequatur?",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 34
 testRunner.Then("Assert \"Post\" records exist in database", ((string)(null)), table77, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new post with empty title")]
        public virtual void CreateNewPostWithEmptyTitle()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new post with empty title", null, ((string[])(null)));
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table78.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 40
 testRunner.When("Login as", ((string)(null)), table78, "When ");
#line hidden
#line 43
 testRunner.When("Execute \"Post\" requst to \"api/v1/posts\"", "{\r\n  \"PostTitle\": \"\",\r\n  \"PostContent\": \"Ut enim ad minima veniam, quis nostrum e" +
                        "xercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi " +
                        "consequatur?\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/posts\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/posts\" contains object", "{\r\n\"PostTitle\": \r\n\t[\r\n\t\t\"The PostTitle field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "PostContent"});
                table79.AddRow(new string[] {
                            "Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit lab" +
                                "oriosam, nisi ut aliquid ex ea commodi consequatur?"});
#line 60
 testRunner.Then("Assert \"Post\" records do not exist in database", ((string)(null)), table79, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new post without title")]
        public virtual void CreateNewPostWithoutTitle()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new post without title", null, ((string[])(null)));
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table80.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 66
 testRunner.When("Login as", ((string)(null)), table80, "When ");
#line hidden
#line 69
 testRunner.When("Execute \"Post\" requst to \"api/v1/posts\"", "{\t \r\n  \"PostContent\": \"Ut enim ad minima veniam, quis nostrum exercitationem ulla" +
                        "m corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/posts\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/posts\" contains object", "{\r\n\"PostTitle\": \r\n\t[\r\n\t\t\"The PostTitle field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "PostContent"});
                table81.AddRow(new string[] {
                            "Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit lab" +
                                "oriosam, nisi ut aliquid ex ea commodi consequatur?"});
#line 85
 testRunner.Then("Assert \"Post\" records do not exist in database", ((string)(null)), table81, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new post with empty content")]
        public virtual void CreateNewPostWithEmptyContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new post with empty content", null, ((string[])(null)));
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table82.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 91
 testRunner.When("Login as", ((string)(null)), table82, "When ");
#line hidden
#line 94
 testRunner.When("Execute \"Post\" requst to \"api/v1/posts\"", "{\r\n  \"PostTitle\": \"Something That Matters\",\r\n  \"PostContent\": \"\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/posts\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/posts\" contains object", "{\r\n\"PostContent\": \r\n\t[\r\n\t\t\"The PostContent field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "PostTitle"});
                table83.AddRow(new string[] {
                            "Something That Matters"});
#line 111
 testRunner.Then("Assert \"Post\" records do not exist in database", ((string)(null)), table83, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new post without content")]
        public virtual void CreateNewPostWithoutContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new post without content", null, ((string[])(null)));
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table84.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 117
 testRunner.When("Login as", ((string)(null)), table84, "When ");
#line hidden
#line 120
 testRunner.When("Execute \"Post\" requst to \"api/v1/posts\"", "{\r\n  \"PostTitle\": \"Something That Matters\"\t  \r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/posts\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/posts\" contains object", "{\r\n\"PostContent\": \r\n\t[\r\n\t\t\"The PostContent field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "PostTitle"});
                table85.AddRow(new string[] {
                            "Something That Matters"});
#line 136
 testRunner.Then("Assert \"Post\" records do not exist in database", ((string)(null)), table85, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all posts when posts exist")]
        public virtual void GetAllPostsWhenPostsExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all posts when posts exist", null, ((string[])(null)));
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table86.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
                table86.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "Second Post",
                            "Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt.",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
                table86.AddRow(new string[] {
                            "33333333-61a4-4714-b6cd-1b1dae19bdec",
                            "Third Post",
                            "Et odio pellentesque diam volutpat commodo.",
                            "00000000-c97d-46e3-a3c9-6c4fd63cef9e"});
                table86.AddRow(new string[] {
                            "44444444-61a4-4714-b6cd-1b1dae19bdec",
                            "Another Post",
                            "Nullam eget felis eget nunc lobortis mattis.",
                            "00000000-37fc-4f48-834d-f95608414c7f"});
                table86.AddRow(new string[] {
                            "55555555-61a4-4714-b6cd-1b1dae19bdec",
                            "The Last Post",
                            "Lectus urna duis convallis convallis tellus id interdum.",
                            "11111111-37fc-4f48-834d-f95608414c7f"});
#line 142
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table86, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table87.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 149
 testRunner.When("Login as", ((string)(null)), table87, "When ");
#line hidden
#line 152
 testRunner.When("Execute \"Get\" requst to \"api/v1/posts\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/posts\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/posts\" contains object", @"[
  {
	""id"": ""11111111-61a4-4714-b6cd-1b1dae19bdec"",
	""postTitle"": ""First Post"",
	""postContent"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"",
	""userId"": ""c913181d-c97d-46e3-a3c9-6c4fd63cef9e""		
  },
  {
	""id"": ""22222222-61a4-4714-b6cd-1b1dae19bdec"",
	""postTitle"": ""Second Post"",
	""postContent"": ""Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt."",
	""userId"": ""c913181d-c97d-46e3-a3c9-6c4fd63cef9e""		
  },	  
  {
	""id"": ""33333333-61a4-4714-b6cd-1b1dae19bdec"",
	""postTitle"": ""Third Post"",
	""postContent"": ""Et odio pellentesque diam volutpat commodo."",
	""userId"": ""00000000-c97d-46e3-a3c9-6c4fd63cef9e""		
  },
  {
	""id"": ""44444444-61a4-4714-b6cd-1b1dae19bdec"",
	""postTitle"": ""Another Post"",
	""postContent"": ""Nullam eget felis eget nunc lobortis mattis."",
	""userId"": ""00000000-37fc-4f48-834d-f95608414c7f""		
  },
  {
	""id"": ""55555555-61a4-4714-b6cd-1b1dae19bdec"",
	""postTitle"": ""The Last Post"",
	""postContent"": ""Lectus urna duis convallis convallis tellus id interdum."",
	""userId"": ""11111111-37fc-4f48-834d-f95608414c7f""		
  }
]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all posts when posts do not exist")]
        public virtual void GetAllPostsWhenPostsDoNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all posts when posts do not exist", null, ((string[])(null)));
#line 193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
#line 194
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table88, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table89.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 196
 testRunner.When("Login as", ((string)(null)), table89, "When ");
#line hidden
#line 199
 testRunner.When("Execute \"Get\" requst to \"api/v1/posts\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/posts\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/posts\" contains object", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get user\'s existed post by id")]
        public virtual void GetUsersExistedPostById()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get user\'s existed post by id", null, ((string[])(null)));
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table90.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Post One",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
                table90.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "Post Two",
                            "Lectus urna duis convallis convallis tellus id interdum.",
                            "12345678-1111-46e3-a3c9-6c4fd63cef9e"});
#line 210
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table90, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table91.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 214
 testRunner.When("Login as", ((string)(null)), table91, "When ");
#line hidden
#line 217
 testRunner.When("Execute \"Get\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/posts/11111111-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 221
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" contains object", "{\t\r\n  \"id\": \"11111111-61a4-4714-b6cd-1b1dae19bdec\",\r\n  \"postTitle\": \"Post One\",\r\n" +
                        "  \"postContent\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\",\r\n  \"" +
                        "userId\": \"c913181d-c97d-46e3-a3c9-6c4fd63cef9e\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get NOT his existed post by id")]
        public virtual void GetNOTHisExistedPostById()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get NOT his existed post by id", null, ((string[])(null)));
#line 232
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table92.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Post One",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
                table92.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "Post Two",
                            "Lectus urna duis convallis convallis tellus id interdum.",
                            "12345678-1111-46e3-a3c9-6c4fd63cef9e"});
#line 233
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table92, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table93.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 237
 testRunner.When("Login as", ((string)(null)), table93, "When ");
#line hidden
#line 240
 testRunner.When("Execute \"Get\" requst to \"api/v1/posts/22222222-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 243
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/posts/22222222-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/posts/22222222-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" contains object", "{\t\r\n  \"id\": \"22222222-61a4-4714-b6cd-1b1dae19bdec\",\r\n  \"postTitle\": \"Post Two\",\r\n" +
                        "  \"postContent\": \"Lectus urna duis convallis convallis tellus id interdum.\",\r\n  " +
                        "\"userId\": \"12345678-1111-46e3-a3c9-6c4fd63cef9e\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get post by id when id does not exist")]
        public virtual void GetPostByIdWhenIdDoesNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get post by id when id does not exist", null, ((string[])(null)));
#line 255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table94.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Post One",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
                table94.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "Post Two",
                            "Lectus urna duis convallis convallis tellus id interdum.",
                            "12345678-1111-46e3-a3c9-6c4fd63cef9e"});
#line 256
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table94, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table95.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 260
 testRunner.When("Login as", ((string)(null)), table95, "When ");
#line hidden
#line 263
 testRunner.When("Execute \"Get\" requst to \"api/v1/posts/33333333-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 266
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/posts/33333333-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"NotFound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 267
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/posts/33333333-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get post by id when any post exists")]
        public virtual void GetPostByIdWhenAnyPostExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get post by id when any post exists", null, ((string[])(null)));
#line 270
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
#line 271
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table96, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table97.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 273
 testRunner.When("Login as", ((string)(null)), table97, "When ");
#line hidden
#line 276
 testRunner.When("Execute \"Get\" requst to \"api/v1/posts/33333333-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 279
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/posts/33333333-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"NotFound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/posts/33333333-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Updates user\'s existed post")]
        public virtual void UpdatesUsersExistedPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updates user\'s existed post", null, ((string[])(null)));
#line 283
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table98.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "My Existed Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
                table98.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "Not My Post!!!",
                            "Lorem ipsum dolor sit amet, consectetur",
                            "12345678-abcd-1234-qwer-qwertyasdfgh"});
#line 284
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table98, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table99.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 288
 testRunner.When("Login as", ((string)(null)), table99, "When ");
#line hidden
#line 291
 testRunner.When("Execute \"Put\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\r\n  \"PostTitle\": \"Updated Post Title\",\r\n  \"PostContent\": \"Ut enim ad minima veni" +
                        "am, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliq" +
                        "uid ex ea commodi consequatur?\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 298
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 299
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" contains object", @"{	
  ""id"": ""11111111-61a4-4714-b6cd-1b1dae19bdec"",
  ""postTitle"": ""Updated Post Title"",
  ""postContent"": ""Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?"",
  ""userId"": ""c913181d-c97d-46e3-a3c9-6c4fd63cef9e""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table100.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
                table100.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec"});
#line 308
 testRunner.Then("Reload from database all \"Post\" records by properties", ((string)(null)), table100, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table101.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Updated Post Title",
                            "Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit lab" +
                                "oriosam, nisi ut aliquid ex ea commodi consequatur?",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
                table101.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "Not My Post!!!",
                            "Lorem ipsum dolor sit amet, consectetur",
                            "12345678-abcd-1234-qwer-qwertyasdfgh"});
#line 312
 testRunner.Then("Assert \"Post\" records exist in database", ((string)(null)), table101, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update NOT user\'s but existed post")]
        public virtual void UpdateNOTUsersButExistedPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update NOT user\'s but existed post", null, ((string[])(null)));
#line 318
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table102.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Not My Post!!!",
                            "Lorem ipsum dolor sit amet, consectetur",
                            "12345678-abcd-1234-qwer-qwertyasdfgh"});
                table102.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "My Post",
                            "Corporis suscipit laboriosam, nisi ut",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 319
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table102, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table103.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 323
 testRunner.When("Login as", ((string)(null)), table103, "When ");
#line hidden
#line 326
 testRunner.When("Execute \"Put\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\r\n  \"PostTitle\": \"Updated Post Title\",\r\n  \"PostContent\": \"Ut enim ad minima veni" +
                        "am, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliq" +
                        "uid ex ea commodi consequatur?\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 333
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 334
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" contains object", "{\t\r\n  \"error\": \"User can not update post 11111111-61a4-4714-b6cd-1b1dae19bdec\"\t  " +
                        "\t  \r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table104.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
                table104.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec"});
#line 340
 testRunner.Then("Reload from database all \"Post\" records by properties", ((string)(null)), table104, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table105.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Not My Post!!!",
                            "Lorem ipsum dolor sit amet, consectetur",
                            "12345678-abcd-1234-qwer-qwertyasdfgh"});
                table105.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "My Post",
                            "Corporis suscipit laboriosam, nisi ut",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 344
 testRunner.Then("Assert \"Post\" records exist in database", ((string)(null)), table105, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update NOT existed post")]
        public virtual void UpdateNOTExistedPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update NOT existed post", null, ((string[])(null)));
#line 350
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
#line 351
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table106, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table107.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 353
 testRunner.When("Login as", ((string)(null)), table107, "When ");
#line hidden
#line 356
 testRunner.When("Execute \"Put\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\r\n  \"PostTitle\": \"Updated Post Title\",\r\n  \"PostContent\": \"Ut enim ad minima veni" +
                        "am, quis nostrum exercitationem ullam corporis?\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 363
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 364
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" contains object", "{\r\n\"error\": \"User can not update post 11111111-61a4-4714-b6cd-1b1dae19bdec\"\t  \t  " +
                        "\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table108.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 370
 testRunner.Then("Assert \"Post\" records do not exist in database", ((string)(null)), table108, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update post with empty title")]
        public virtual void UpdatePostWithEmptyTitle()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update post with empty title", null, ((string[])(null)));
#line 375
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table109.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "My Existed Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 376
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table109, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table110.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 379
 testRunner.When("Login as", ((string)(null)), table110, "When ");
#line hidden
#line 382
 testRunner.When("Execute \"Put\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\r\n  \"PostTitle\": \"\",\r\n  \"PostContent\": \"Ut enim ad minima veniam, quis\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 389
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 390
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" contains object", "{\r\n\t\"PostTitle\": \r\n\t\t[\r\n\t\t\t\"The PostTitle field is required.\"\r\n\t\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table111.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 399
 testRunner.Then("Reload from database all \"Post\" records by properties", ((string)(null)), table111, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table112.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "My Existed Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 402
 testRunner.Then("Assert \"Post\" records exist in database", ((string)(null)), table112, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update post with empty content")]
        public virtual void UpdatePostWithEmptyContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update post with empty content", null, ((string[])(null)));
#line 407
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table113.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "My Existed Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 408
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table113, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table114.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 411
 testRunner.When("Login as", ((string)(null)), table114, "When ");
#line hidden
#line 414
 testRunner.When("Execute \"Put\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\r\n  \"PostTitle\": \"My Existed Post\",\r\n  \"PostContent\": \"\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 421
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1" +
                        "b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 422
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19" +
                        "bdec\" contains object", "{\r\n\t\"PostContent\": \r\n\t\t[\r\n\t\t\t\"The PostContent field is required.\"\r\n\t\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table115.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 431
 testRunner.Then("Reload from database all \"Post\" records by properties", ((string)(null)), table115, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table116.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "My Existed Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 434
 testRunner.Then("Assert \"Post\" records exist in database", ((string)(null)), table116, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deletes user\'s existed post")]
        public virtual void DeletesUsersExistedPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deletes user\'s existed post", null, ((string[])(null)));
#line 439
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table117.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "My Existed Post",
                            "Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis?",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 440
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table117, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table118.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 443
 testRunner.When("Login as", ((string)(null)), table118, "When ");
#line hidden
#line 446
 testRunner.When("Execute \"Delete\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 449
 testRunner.Then("Assert Status Code of Response from \"Delete\" \"api/v1/posts/11111111-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"NoContent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 450
 testRunner.Then("Assert Body of Response from \"Delete\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table119.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 451
 testRunner.Then("Assert \"Post\" records do not exist in database", ((string)(null)), table119, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete NOT user\'s but existed post")]
        public virtual void DeleteNOTUsersButExistedPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete NOT user\'s but existed post", null, ((string[])(null)));
#line 456
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
                table120.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Not My Post!!!",
                            "Lorem ipsum dolor sit amet, consectetur",
                            "12345678-abcd-1234-qwer-qwertyasdfgh"});
#line 457
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table120, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table121.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 460
 testRunner.When("Login as", ((string)(null)), table121, "When ");
#line hidden
#line 463
 testRunner.When("Execute \"Delete\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 466
 testRunner.Then("Assert Status Code of Response from \"Delete\" \"api/v1/posts/11111111-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 467
 testRunner.Then("Assert Body of Response from \"Delete\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\r\n\t\"error\": \"User can not delete post 11111111-61a4-4714-b6cd-1b1dae19bdec\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Not My Post!!!",
                            "Lorem ipsum dolor sit amet, consectetur",
                            "12345678-abcd-1234-qwer-qwertyasdfgh"});
#line 473
 testRunner.Then("Assert \"Post\" records exist in database", ((string)(null)), table122, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete NOT existed post")]
        public virtual void DeleteNOTExistedPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete NOT existed post", null, ((string[])(null)));
#line 477
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PostTitle",
                            "PostContent",
                            "UserId"});
#line 478
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table123, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table124.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 480
 testRunner.When("Login as", ((string)(null)), table124, "When ");
#line hidden
#line 483
 testRunner.When("Execute \"Delete\" requst to \"api/v1/posts/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 486
 testRunner.Then("Assert Status Code of Response from \"Delete\" \"api/v1/posts/11111111-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 487
 testRunner.Then("Assert Body of Response from \"Delete\" \"api/v1/posts/11111111-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\r\n\t\"error\": \"User can not delete post 11111111-61a4-4714-b6cd-1b1dae19bdec\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
