// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tweetbook.Tests.Integration.Tests.ControllersTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Comments Controller")]
    public partial class CommentsControllerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CommentsController.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Comments Controller", "\tIn order to execute basic CRUD operations with Comments\r\n\tAs Tweetbook developer" +
                    "\r\n\tI want to have /comments endpoint ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "UserName",
                        "NormalizedUserName",
                        "Email",
                        "NormalizedEmail",
                        "EmailConfirmed",
                        "PasswordHash",
                        "SecurityStamp",
                        "ConcurrencyStamp",
                        "PhoneNumberConfirmed",
                        "TwoFactorEnabled",
                        "LockoutEnabled",
                        "AccessFailedCount"});
            table1.AddRow(new string[] {
                        "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                        "user@mail.com",
                        "USER@MAIL.COM",
                        "user_poster@mail.com",
                        "USER@MAIL.COM",
                        "False",
                        "AQAAAAEAACcQAAAAEE3O6wFKAY2CL9jx4QvTk+XnPRE419lmYlyvs7Fffu5T5pspM2z3/RCo3D6IsnyfD" +
                            "Q==",
                        "DYER7IXAG6MD244BVFN5ETREGHYX6GSP",
                        "fe4b708e-e301-4056-8acc-4144dc8c285e",
                        "False",
                        "False",
                        "True",
                        "0"});
#line 7
 testRunner.Given("\"IdentityUser\" records exist in database", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create comment to NOT user\'s post when other comments exist for the same post")]
        public virtual void CreateCommentToNOTUsersPostWhenOtherCommentsExistForTheSamePost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comment to NOT user\'s post when other comments exist for the same post", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table2.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
                table2.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "99999999-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My Second Post",
                            "Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt."});
#line 13
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table3.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table3.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt."});
                table3.AddRow(new string[] {
                            "33333333-61a4-4714-b6cd-1b1dae19bdec",
                            "00000000-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Et odio pellentesque diam volutpat commodo."});
                table3.AddRow(new string[] {
                            "44444444-61a4-4714-b6cd-1b1dae19bdec",
                            "00000000-37fc-4f48-834d-f95608414c7f",
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Nullam eget felis eget nunc lobortis mattis."});
                table3.AddRow(new string[] {
                            "55555555-61a4-4714-b6cd-1b1dae19bdec",
                            "11111111-37fc-4f48-834d-f95608414c7f",
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "Lectus urna duis convallis convallis tellus id interdum."});
#line 17
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table4.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 24
 testRunner.When("Login as", ((string)(null)), table4, "When ");
#line hidden
#line 27
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t  \r\n  \"CommentContent\": \"Nullam eget felis eget?\",\r\n  \"PostId\": \"11111111-61a4-" +
                        "4714-b6cd-1b1dae19bdec\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains property \"id\" as v" +
                        "alid GUID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object, ignoring p" +
                        "roperties \"id\"", "{\t\r\n  \"id\": \"some guid, value is ignored in this test case\",\t  \r\n  \"commentConten" +
                        "t\": \"Nullam eget felis eget?\",\r\n  \"postId\": \"11111111-61a4-4714-b6cd-1b1dae19bde" +
                        "c\",\r\n  \"userId\": \"c913181d-c97d-46e3-a3c9-6c4fd63cef9e\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "CommentContent",
                            "UserId",
                            "PostId"});
                table5.AddRow(new string[] {
                            "Nullam eget felis eget?",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 45
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new comment to NOT user\'s post when other comments do not exist for the sa" +
            "me post")]
        public virtual void CreateNewCommentToNOTUsersPostWhenOtherCommentsDoNotExistForTheSamePost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new comment to NOT user\'s post when other comments do not exist for the sa" +
                    "me post", null, ((string[])(null)));
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table6.AddRow(new string[] {
                            "c913181d-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
                table6.AddRow(new string[] {
                            "33333333-61a4-4714-b6cd-1b1dae19bdec",
                            "22222222-c97d-46e3-a3c9-6c4fd63cef9e",
                            "Other user\'s Post",
                            "Lectus urna duis convallis convallis tellus id interdum."});
#line 51
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table7.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 55
 testRunner.When("Login as", ((string)(null)), table7, "When ");
#line hidden
#line 58
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t  \r\n  \"CommentContent\": \"Nullam eget felis eget nunc lobortis mattis!\",\r\n  \"Pos" +
                        "tId\": \"33333333-61a4-4714-b6cd-1b1dae19bdec\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains property \"id\" as v" +
                        "alid GUID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object, ignoring p" +
                        "roperties \"id\"", "{\t\r\n  \"id\": \"some guid, value is ignored in this test case\",\t  \r\n  \"commentConten" +
                        "t\": \"Nullam eget felis eget nunc lobortis mattis!\",\r\n  \"postId\": \"33333333-61a4-" +
                        "4714-b6cd-1b1dae19bdec\",\r\n  \"userId\": \"c913181d-c97d-46e3-a3c9-6c4fd63cef9e\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "CommentContent",
                            "UserId",
                            "PostId"});
                table8.AddRow(new string[] {
                            "Nullam eget felis eget nunc lobortis mattis!",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "33333333-61a4-4714-b6cd-1b1dae19bdec"});
#line 76
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creates comment to user\'s post")]
        public virtual void CreatesCommentToUsersPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creates comment to user\'s post", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table9.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
                table9.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My Second Post",
                            "Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt."});
                table9.AddRow(new string[] {
                            "33333333-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-c97d-46e3-a3c9-6c4fd63cef9e",
                            "Other user\'s Post",
                            "Lectus urna duis convallis convallis tellus id interdum."});
#line 82
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table10.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 87
 testRunner.When("Login as", ((string)(null)), table10, "When ");
#line hidden
#line 90
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t  \r\n  \"CommentContent\": \"Nullam eget felis eget nunc lobortis mattis!\",\r\n  \"Pos" +
                        "tId\": \"11111111-61a4-4714-b6cd-1b1dae19bdec\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains property \"id\" as v" +
                        "alid GUID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object, ignoring p" +
                        "roperties \"id\"", "{\t\r\n  \"id\": \"some guid, value is ignored in this test case\",\t  \r\n  \"commentConten" +
                        "t\": \"Nullam eget felis eget nunc lobortis mattis!\",\r\n  \"postId\": \"11111111-61a4-" +
                        "4714-b6cd-1b1dae19bdec\",\r\n  \"userId\": \"c913181d-c97d-46e3-a3c9-6c4fd63cef9e\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "CommentContent",
                            "UserId",
                            "PostId"});
                table11.AddRow(new string[] {
                            "Nullam eget felis eget nunc lobortis mattis!",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 108
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create comment to NOT existed post")]
        public virtual void CreateCommentToNOTExistedPost()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comment to NOT existed post", null, ((string[])(null)));
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table12.AddRow(new string[] {
                            "c913181d-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
                table12.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "11111111-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My Second Post",
                            "Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt."});
                table12.AddRow(new string[] {
                            "33333333-61a4-4714-b6cd-1b1dae19bdec",
                            "22222222-c97d-46e3-a3c9-6c4fd63cef9e",
                            "Other user\'s Post",
                            "Lectus urna duis convallis convallis tellus id interdum."});
#line 114
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table13.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 119
 testRunner.When("Login as", ((string)(null)), table13, "When ");
#line hidden
#line 122
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t  \r\n  \"CommentContent\": \"Nullam eget felis eget nunc lobortis mattis!\",\r\n  \"Pos" +
                        "tId\": \"12345678-61a4-4714-b6cd-1b1dae19bdec\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object", "{\r\n\t\"error\": \"Post with Id 12345678-61a4-4714-b6cd-1b1dae19bdec does not exist\"\r\n" +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "CommentContent",
                            "UserId",
                            "PostId"});
                table14.AddRow(new string[] {
                            "Nullam eget felis eget nunc lobortis mattis!",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "12345678-61a4-4714-b6cd-1b1dae19bdec"});
#line 136
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table14, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create comment when any post exists")]
        public virtual void CreateCommentWhenAnyPostExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comment when any post exists", null, ((string[])(null)));
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
#line 142
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table15, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table16.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 144
 testRunner.When("Login as", ((string)(null)), table16, "When ");
#line hidden
#line 147
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t  \r\n  \"CommentContent\": \"Nullam eget felis eget nunc lobortis mattis!\",\r\n  \"Pos" +
                        "tId\": \"12345678-61a4-4714-b6cd-1b1dae19bdec\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object", "{\r\n\t\"error\": \"Post with Id 12345678-61a4-4714-b6cd-1b1dae19bdec does not exist\"\r\n" +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "CommentContent",
                            "UserId",
                            "PostId"});
                table17.AddRow(new string[] {
                            "Nullam eget felis eget nunc lobortis mattis!",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "12345678-61a4-4714-b6cd-1b1dae19bdec"});
#line 161
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create comment without PostId")]
        public virtual void CreateCommentWithoutPostId()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comment without PostId", null, ((string[])(null)));
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table18.AddRow(new string[] {
                            "c913181d-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
#line 167
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table18, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table19.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 170
 testRunner.When("Login as", ((string)(null)), table19, "When ");
#line hidden
#line 173
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t  \r\n  \"CommentContent\": \"Nullam eget felis eget nunc lobortis mattis!\"\t  \r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 179
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object", "{\r\n\"PostId\": \r\n\t[\r\n\t\t\"The PostId field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "CommentContent"});
                table20.AddRow(new string[] {
                            "Nullam eget felis eget nunc lobortis mattis!"});
#line 189
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table20, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create comment with empty PostId")]
        public virtual void CreateCommentWithEmptyPostId()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comment with empty PostId", null, ((string[])(null)));
#line 194
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table21.AddRow(new string[] {
                            "c913181d-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
#line 195
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table21, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table22.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 198
 testRunner.When("Login as", ((string)(null)), table22, "When ");
#line hidden
#line 201
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t  \r\n  \"CommentContent\": \"Nullam eget felis eget nunc lobortis mattis!\",\r\n  \"Pos" +
                        "tId\": \"\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 208
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object", "{\r\n\"PostId\": \r\n\t[\r\n\t\t\"The PostId field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "CommentContent"});
                table23.AddRow(new string[] {
                            "Nullam eget felis eget nunc lobortis mattis!"});
#line 218
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create comment without Content")]
        public virtual void CreateCommentWithoutContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comment without Content", null, ((string[])(null)));
#line 223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table24.AddRow(new string[] {
                            "c913181d-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
#line 224
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table24, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table25.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 227
 testRunner.When("Login as", ((string)(null)), table25, "When ");
#line hidden
#line 230
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t\r\n\t\"PostId\": \"c913181d-61a4-4714-b6cd-1b1dae19bdec\"\t\t\t  \r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object", "{\r\n\"CommentContent\": \r\n\t[\r\n\t\t\"The CommentContent field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId"});
                table26.AddRow(new string[] {
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 246
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table26, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create comment with empty Content")]
        public virtual void CreateCommentWithEmptyContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comment with empty Content", null, ((string[])(null)));
#line 251
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostTitle",
                            "PostContent"});
                table27.AddRow(new string[] {
                            "c913181d-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "My First Post",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"});
#line 252
 testRunner.Given("\"Post\" records exist in database", ((string)(null)), table27, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table28.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 255
 testRunner.When("Login as", ((string)(null)), table28, "When ");
#line hidden
#line 258
 testRunner.When("Execute \"Post\" requst to \"api/v1/comments\"", "{\t\r\n\t\"PostId\": \"c913181d-61a4-4714-b6cd-1b1dae19bdec\",\r\n\t\"CommentContent\": \"\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 265
 testRunner.Then("Assert Status Code of Response from \"Post\" \"api/v1/comments\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 266
 testRunner.Then("Assert Body of Response from \"Post\" \"api/v1/comments\" contains object", "{\r\n\"CommentContent\": \r\n\t[\r\n\t\t\"The CommentContent field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId"});
                table29.AddRow(new string[] {
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e"});
#line 275
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table29, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all comments when comments exist")]
        public virtual void GetAllCommentsWhenCommentsExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all comments when comments exist", null, ((string[])(null)));
#line 280
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table30.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "0831f94b-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table30.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "0831f94b-4db5-4758-bbd6-3a7dbd9792ee",
                            "Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt."});
                table30.AddRow(new string[] {
                            "33333333-61a4-4714-b6cd-1b1dae19bdec",
                            "00000000-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Et odio pellentesque diam volutpat commodo."});
                table30.AddRow(new string[] {
                            "44444444-61a4-4714-b6cd-1b1dae19bdec",
                            "00000000-37fc-4f48-834d-f95608414c7f",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Nullam eget felis eget nunc lobortis mattis."});
                table30.AddRow(new string[] {
                            "55555555-61a4-4714-b6cd-1b1dae19bdec",
                            "11111111-37fc-4f48-834d-f95608414c7f",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lectus urna duis convallis convallis tellus id interdum."});
#line 281
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table30, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table31.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 288
 testRunner.When("Login as", ((string)(null)), table31, "When ");
#line hidden
#line 291
 testRunner.When("Execute \"Get\" requst to \"api/v1/comments\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 294
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/comments\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 295
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/comments\" contains object", @"[
  {
	""id"": ""11111111-61a4-4714-b6cd-1b1dae19bdec"",
	""commentContent"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"",
	""postId"": ""0831f94b-4db5-4758-bbd6-3a7dbd9792ee"",
	""userId"": ""c913181d-c97d-46e3-a3c9-6c4fd63cef9e""
  },
  {
	""id"": ""22222222-61a4-4714-b6cd-1b1dae19bdec"",
	""commentContent"": ""Vulputate mi sit amet mauris commodo quis imperdiet massa tincidunt."",
	""postId"": ""0831f94b-4db5-4758-bbd6-3a7dbd9792ee"",
	""userId"": ""c913181d-c97d-46e3-a3c9-6c4fd63cef9e""
  },
  {
	""id"": ""33333333-61a4-4714-b6cd-1b1dae19bdec"",
	""commentContent"": ""Et odio pellentesque diam volutpat commodo."",
	""postId"": ""11111111-4db5-4758-bbd6-3a7dbd9792ee"",
	""userId"": ""00000000-c97d-46e3-a3c9-6c4fd63cef9e""
  },
  {
	""id"": ""44444444-61a4-4714-b6cd-1b1dae19bdec"",
	""commentContent"": ""Nullam eget felis eget nunc lobortis mattis."",
	""postId"": ""11111111-4db5-4758-bbd6-3a7dbd9792ee"",
	""userId"": ""00000000-37fc-4f48-834d-f95608414c7f""
  },
  {
	""id"": ""55555555-61a4-4714-b6cd-1b1dae19bdec"",
	""commentContent"": ""Lectus urna duis convallis convallis tellus id interdum."",
	""postId"": ""22222222-4db5-4758-bbd6-3a7dbd9792ee"",
	""userId"": ""11111111-37fc-4f48-834d-f95608414c7f""
  }
]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get all comments when comments do not exist")]
        public virtual void GetAllCommentsWhenCommentsDoNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all comments when comments do not exist", null, ((string[])(null)));
#line 332
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
#line 333
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table32, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table33.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 335
 testRunner.When("Login as", ((string)(null)), table33, "When ");
#line hidden
#line 338
 testRunner.When("Execute \"Get\" requst to \"api/v1/comments\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 341
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/comments\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 342
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/comments\" contains object", "[\t  \r\n]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User gets his existed comment by id")]
        public virtual void UserGetsHisExistedCommentById()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User gets his existed comment by id", null, ((string[])(null)));
#line 349
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table34.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table34.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 350
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table34, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table35.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 354
 testRunner.When("Login as", ((string)(null)), table35, "When ");
#line hidden
#line 357
 testRunner.When("Execute \"Get\" requst to \"api/v1/comments/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 360
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/comments/11111111-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 361
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/comments/11111111-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", @"{	
  ""id"": ""11111111-61a4-4714-b6cd-1b1dae19bdec"",	  
  ""commentContent"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"",
  ""postId"": ""11111111-4db5-4758-bbd6-3a7dbd9792ee"",
  ""userId"": ""c913181d-c97d-46e3-a3c9-6c4fd63cef9e""
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User gets NOT his existed comment by id")]
        public virtual void UserGetsNOTHisExistedCommentById()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User gets NOT his existed comment by id", null, ((string[])(null)));
#line 372
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table36.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table36.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 373
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table36, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table37.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 377
 testRunner.When("Login as", ((string)(null)), table37, "When ");
#line hidden
#line 380
 testRunner.When("Execute \"Get\" requst to \"api/v1/comments/22222222-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 383
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/comments/22222222-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 384
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/comments/22222222-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\t\r\n  \"id\": \"22222222-61a4-4714-b6cd-1b1dae19bdec\",\t  \r\n  \"commentContent\": \"Quis" +
                        " nostrum exercitationem ullam corporis suscipit laboriosam\",\r\n  \"postId\": \"22222" +
                        "222-4db5-4758-bbd6-3a7dbd9792ee\",\r\n  \"userId\": \"12345678-qwer-1234-asdf-6c4fd63c" +
                        "ef9e\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get comment when id does not exist")]
        public virtual void GetCommentWhenIdDoesNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get comment when id does not exist", null, ((string[])(null)));
#line 395
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table38.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table38.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 396
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table38, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table39.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 400
 testRunner.When("Login as", ((string)(null)), table39, "When ");
#line hidden
#line 403
 testRunner.When("Execute \"Get\" requst to \"api/v1/comments/33333333-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 406
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/comments/33333333-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"NotFound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 407
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/comments/33333333-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get comment by id when any comment exists")]
        public virtual void GetCommentByIdWhenAnyCommentExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get comment by id when any comment exists", null, ((string[])(null)));
#line 410
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
#line 411
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table40, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table41.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 413
 testRunner.When("Login as", ((string)(null)), table41, "When ");
#line hidden
#line 416
 testRunner.When("Execute \"Get\" requst to \"api/v1/comments/33333333-61a4-4714-b6cd-1b1dae19bdec\"", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 419
 testRunner.Then("Assert Status Code of Response from \"Get\" \"api/v1/comments/33333333-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"NotFound\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 420
 testRunner.Then("Assert Body of Response from \"Get\" \"api/v1/comments/33333333-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User updates his existed comment")]
        public virtual void UserUpdatesHisExistedComment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User updates his existed comment", null, ((string[])(null)));
#line 423
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table42.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table42.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 424
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table42, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table43.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 428
 testRunner.When("Login as", ((string)(null)), table43, "When ");
#line hidden
#line 431
 testRunner.When("Execute \"Put\" requst to \"api/v1/comments/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\t  \r\n  \"CommentContent\": \"Updated Comment Content\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 437
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/comments/11111111-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 438
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/comments/11111111-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\t\r\n  \"id\": \"11111111-61a4-4714-b6cd-1b1dae19bdec\",\t  \r\n  \"commentContent\": \"Upda" +
                        "ted Comment Content\",\r\n  \"postId\": \"11111111-4db5-4758-bbd6-3a7dbd9792ee\",\r\n  \"u" +
                        "serId\": \"c913181d-c97d-46e3-a3c9-6c4fd63cef9e\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table44.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
                table44.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec"});
#line 447
 testRunner.Then("Reload from database all \"Comment\" records by properties", ((string)(null)), table44, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table45.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Updated Comment Content"});
                table45.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 451
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table45, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to update NOT his but existed comment")]
        public virtual void UserTriesToUpdateNOTHisButExistedComment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to update NOT his but existed comment", null, ((string[])(null)));
#line 457
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table46.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table46.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 458
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table46, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table47.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 462
 testRunner.When("Login as", ((string)(null)), table47, "When ");
#line hidden
#line 465
 testRunner.When("Execute \"Put\" requst to \"api/v1/comments/22222222-61a4-4714-b6cd-1b1dae19bdec\"", "{\t  \r\n  \"CommentContent\": \"Updated Comment Content!!!\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 471
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/comments/22222222-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 472
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/comments/22222222-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\t\r\n  \"error\": \"User can not update comment 22222222-61a4-4714-b6cd-1b1dae19bdec\"" +
                        "\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table48.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
                table48.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec"});
#line 478
 testRunner.Then("Reload from database all \"Comment\" records by properties", ((string)(null)), table48, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table49.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table49.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 482
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table49, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to update not existed comment")]
        public virtual void UserTriesToUpdateNotExistedComment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to update not existed comment", null, ((string[])(null)));
#line 488
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table50.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table50.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "22222222-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 489
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table50, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table51.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 493
 testRunner.When("Login as", ((string)(null)), table51, "When ");
#line hidden
#line 496
 testRunner.When("Execute \"Put\" requst to \"api/v1/comments/33333333-61a4-4714-b6cd-1b1dae19bdec\"", "{\t  \r\n  \"CommentContent\": \"Updated Comment Content!!!\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 502
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/comments/33333333-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 503
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/comments/33333333-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\t\r\n  \"error\": \"User can not update comment 33333333-61a4-4714-b6cd-1b1dae19bdec\"" +
                        "\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table52.AddRow(new string[] {
                            "33333333-61a4-4714-b6cd-1b1dae19bdec"});
#line 509
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table52, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to update comment when any comment exists")]
        public virtual void UserTriesToUpdateCommentWhenAnyCommentExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to update comment when any comment exists", null, ((string[])(null)));
#line 514
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
#line 515
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table53, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table54.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 517
 testRunner.When("Login as", ((string)(null)), table54, "When ");
#line hidden
#line 520
 testRunner.When("Execute \"Put\" requst to \"api/v1/comments/00000000-61a4-4714-b6cd-1b1dae19bdec\"", "{\t  \r\n  \"CommentContent\": \"Updated Comment Content!!!\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 526
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/comments/00000000-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 527
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/comments/00000000-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\t\r\n  \"error\": \"User can not update comment 00000000-61a4-4714-b6cd-1b1dae19bdec\"" +
                        "\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table55.AddRow(new string[] {
                            "00000000-61a4-4714-b6cd-1b1dae19bdec"});
#line 533
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table55, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to update comment without comment content")]
        public virtual void UserTriesToUpdateCommentWithoutCommentContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to update comment without comment content", null, ((string[])(null)));
#line 538
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table56.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
#line 539
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table56, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table57.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 542
 testRunner.When("Login as", ((string)(null)), table57, "When ");
#line hidden
#line 545
 testRunner.When("Execute \"Put\" requst to \"api/v1/comments/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 550
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/comments/11111111-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 551
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/comments/11111111-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\r\n\"CommentContent\": \r\n\t[\r\n\t\t\"The CommentContent field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table58.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 560
 testRunner.Then("Reload from database all \"Comment\" records by properties", ((string)(null)), table58, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table59.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
#line 563
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table59, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to update comment with empty comment content")]
        public virtual void UserTriesToUpdateCommentWithEmptyCommentContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to update comment with empty comment content", null, ((string[])(null)));
#line 568
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table60.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
#line 569
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table60, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table61.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 572
 testRunner.When("Login as", ((string)(null)), table61, "When ");
#line hidden
#line 575
 testRunner.When("Execute \"Put\" requst to \"api/v1/comments/11111111-61a4-4714-b6cd-1b1dae19bdec\"", "{\r\n\t\"CommentContent\": \"\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 581
 testRunner.Then("Assert Status Code of Response from \"Put\" \"api/v1/comments/11111111-61a4-4714-b6c" +
                        "d-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 582
 testRunner.Then("Assert Body of Response from \"Put\" \"api/v1/comments/11111111-61a4-4714-b6cd-1b1da" +
                        "e19bdec\" contains object", "{\r\n\"CommentContent\": \r\n\t[\r\n\t\t\"The CommentContent field is required.\"\r\n\t]\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table62.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 591
 testRunner.Then("Reload from database all \"Comment\" records by properties", ((string)(null)), table62, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table63.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
#line 594
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table63, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User deletes his existed comment")]
        public virtual void UserDeletesHisExistedComment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User deletes his existed comment", null, ((string[])(null)));
#line 599
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table64.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table64.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 600
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table64, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table65.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 604
 testRunner.When("Login as", ((string)(null)), table65, "When ");
#line hidden
#line 607
 testRunner.When("Execute \"Delete\" requst to \"api/v1/comments/11111111-61a4-4714-b6cd-1b1dae19bdec\"" +
                        "", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 610
 testRunner.Then("Assert Status Code of Response from \"Delete\" \"api/v1/comments/11111111-61a4-4714-" +
                        "b6cd-1b1dae19bdec\" is \"NoContent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 611
 testRunner.Then("Assert Body of Response from \"Delete\" \"api/v1/comments/11111111-61a4-4714-b6cd-1b" +
                        "1dae19bdec\" is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id"});
                table66.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec"});
#line 612
 testRunner.Then("Assert \"Comment\" records do not exist in database", ((string)(null)), table66, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to delete NOT his but existed comment")]
        public virtual void UserTriesToDeleteNOTHisButExistedComment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to delete NOT his but existed comment", null, ((string[])(null)));
#line 617
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table67.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table67.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 618
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table67, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table68.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 622
 testRunner.When("Login as", ((string)(null)), table68, "When ");
#line hidden
#line 625
 testRunner.When("Execute \"Delete\" requst to \"api/v1/comments/22222222-61a4-4714-b6cd-1b1dae19bdec\"" +
                        "", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 628
 testRunner.Then("Assert Status Code of Response from \"Delete\" \"api/v1/comments/22222222-61a4-4714-" +
                        "b6cd-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 629
 testRunner.Then("Assert Body of Response from \"Delete\" \"api/v1/comments/22222222-61a4-4714-b6cd-1b" +
                        "1dae19bdec\" contains object", "{\r\n\t\"error\": \"User can not delete comment 22222222-61a4-4714-b6cd-1b1dae19bdec\"\r\n" +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table69.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table69.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 635
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table69, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to delete NOT existed comment")]
        public virtual void UserTriesToDeleteNOTExistedComment()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to delete NOT existed comment", null, ((string[])(null)));
#line 641
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table70.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table70.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 642
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table70, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table71.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 646
 testRunner.When("Login as", ((string)(null)), table71, "When ");
#line hidden
#line 649
 testRunner.When("Execute \"Delete\" requst to \"api/v1/comments/33333333-61a4-4714-b6cd-1b1dae19bdec\"" +
                        "", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 652
 testRunner.Then("Assert Status Code of Response from \"Delete\" \"api/v1/comments/33333333-61a4-4714-" +
                        "b6cd-1b1dae19bdec\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 653
 testRunner.Then("Assert Body of Response from \"Delete\" \"api/v1/comments/33333333-61a4-4714-b6cd-1b" +
                        "1dae19bdec\" contains object", "{\r\n\t\"error\": \"User can not delete comment 33333333-61a4-4714-b6cd-1b1dae19bdec\"\r\n" +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
                table72.AddRow(new string[] {
                            "11111111-61a4-4714-b6cd-1b1dae19bdec",
                            "c913181d-c97d-46e3-a3c9-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod"});
                table72.AddRow(new string[] {
                            "22222222-61a4-4714-b6cd-1b1dae19bdec",
                            "12345678-qwer-1234-asdf-6c4fd63cef9e",
                            "11111111-4db5-4758-bbd6-3a7dbd9792ee",
                            "Quis nostrum exercitationem ullam corporis suscipit laboriosam"});
#line 659
 testRunner.Then("Assert \"Comment\" records exist in database", ((string)(null)), table72, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User tries to delete comment when any comment exists")]
        public virtual void UserTriesToDeleteCommentWhenAnyCommentExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User tries to delete comment when any comment exists", null, ((string[])(null)));
#line 665
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "UserId",
                            "PostId",
                            "CommentContent"});
#line 666
 testRunner.Given("\"Comment\" records exist in database", ((string)(null)), table73, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Email",
                            "Password"});
                table74.AddRow(new string[] {
                            "user@mail.com",
                            "Dummy#123"});
#line 668
 testRunner.When("Login as", ((string)(null)), table74, "When ");
#line hidden
#line 671
 testRunner.When("Execute \"Delete\" requst to \"api/v1/comments/11111111-4db5-4758-bbd6-3a7dbd9792ee\"" +
                        "", "", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 674
 testRunner.Then("Assert Status Code of Response from \"Delete\" \"api/v1/comments/11111111-4db5-4758-" +
                        "bbd6-3a7dbd9792ee\" is \"BadRequest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 675
 testRunner.Then("Assert Body of Response from \"Delete\" \"api/v1/comments/11111111-4db5-4758-bbd6-3a" +
                        "7dbd9792ee\" contains object", "{\r\n\t\"error\": \"User can not delete comment 11111111-4db5-4758-bbd6-3a7dbd9792ee\"\r\n" +
                        "}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
